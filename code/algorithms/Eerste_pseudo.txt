def depth_first(state, depth):
    if len(state) < depth:
    for i in ["l", "r"]:
    depth_first(state + i, depth)

depth_first("", 3)

wat is onze depth

s.translate(None, string.punctuation)

Plan:
1000 keer base line runnen voor trajecten
    bij opslaan in timetable, kijk of toevoegen traject aan timetable de score van de timetable beter maakt
    vergelijk timetable met al bestaande timetable om te kijken of je hem wil opslaan. 


pseudocode:
leeg_timetable aanmaken
herhaal 1000x
    baseline aanroepen, geeft lijst
    als aantal trajecten < 7
        loop door trajecten lijst
            voeg traject toe aan timetable
            als hogere score    
                hou traject in timetable
            zo niet
                haal hem er weer uit
        kijk of timetable hogere score dan vorige traject
            sla hem op
        als niet
            sla hem niet op
geef beste timetable
